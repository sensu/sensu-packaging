preinstall scriptlet (using /bin/sh):
#!/bin/sh

detected_os()
{
    platform="unknown"
    unamestr=`uname`
    if [ "$unamestr" = "AIX" ]; then
        platform="aix"
    elif [ "$unamestr" = "Darwin" ]; then
        platform="mac"
    elif [ "$unamestr" = "FreeBSD" ]; then
        platform="freebsd"
    elif [ "$unamestr" = "Linux" ]; then
        platform="linux"
    elif [ "$unamestr" = "SunOS" ]; then
        platform="solaris"
    fi
    echo $platform
}

service_user()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        echo "_sensu"
    else
        echo "sensu"
    fi
    set -e
}

service_group()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        echo "_sensu"
    else
        echo "sensu"
    fi
    set -e
}

using_systemd()
{
    [ -e "/proc/1/comm" ] && grep -q "^systemd$" /proc/1/comm
}

os=`detected_os`
if [ $os = "unknown" ]; then
    echo "Unsupported OS"
    exit 1
fi
# group_missing will return 0 if the group exists, non-zero if it does not
group_missing()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        dscl . -list /Groups | grep "^_sensu" > /dev/null
        missing=$?
    elif [ $os = "linux" ]; then
        getent group sensu > /dev/null
        missing=$?
    else
        grep "^sensu:" /etc/group > /dev/null
        missing=$?
    fi
    set -e
    echo $missing
}

create_group_aix()
{
    mkgroup sensu
}

create_group_freebsd()
{
    pw groupadd sensu
}

create_group_linux()
{
    groupadd -r sensu
}

create_group_mac()
{
    last_used_gid=`dscacheutil -q group | grep gid | tail -n 1 | awk '{ print $2 }'`
    sensu_gid=`echo "$last_used_gid + 1" | bc`
    dscl . -create Groups/_sensu
    dscl . -create Groups/_sensu PrimaryGroupID $sensu_gid
}

create_group_solaris()
{
    groupadd sensu
}

create_group()
{
    missing=`group_missing`
    if [ $missing != "0" ]; then
        os=`detected_os`
        if [ $os = "aix" ]; then
            create_group_aix
        elif [ $os = "freebsd" ]; then
            create_group_freebsd
        elif [ $os = "linux" ]; then
            create_group_linux
        elif [ $os = "mac" ]; then
            create_group_mac
        elif [ $os = "solaris" ]; then
            create_group_solaris
        else
            echo "Unsupported OS for create_group function"
            exit 1
        fi
    fi
}
# user_missing will return 0 if the user exists, non-zero if it does not
user_missing()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        dscl . -list /Users | grep "^_sensu" > /dev/null
        missing=$?
    elif [ $os = "linux" ]; then
        getent passwd sensu > /dev/null
        missing=$?
    else
        grep "^sensu:" /etc/passwd > /dev/null
        missing=$?
    fi
    set -e
    echo $missing
}

create_user_aix()
{
    # add /usr/bin/false to the list of allowed shells
    # NOTE: this is all terrible and makes kittens cry.
    # it should all be replaced by a single, idempotent command
    set +e
    /usr/bin/lssec -f /etc/security/login.cfg -s usw -a shells | /usr/bin/grep "/usr/bin/false" > /dev/null
    RC=$?
    set -e
    if [ "${RC}" != "0" ]; then
        SHVAL=`/usr/bin/lssec -f /etc/security/login.cfg -s usw -a shells | /usr/bin/cut -d '=' -f2`
        /usr/bin/chsec -f /etc/security/login.cfg -s usw -a shells="${SHVAL},/usr/bin/false"
    fi

    # create the system user
    mkuser pgrp="sensu" shell="/usr/bin/false" home="/opt/sensu" sensu
}

create_user_freebsd()
{
    pw adduser sensu -g sensu -d /nonexistent -s /usr/sbin/nologin -c "Sensu Monitoring Framework"
}

create_user_linux()
{
    useradd -r -g sensu -d /opt/sensu -s /bin/false -c "Sensu Monitoring Framework" sensu
}

create_user_mac()
{
    sensu_gid=`dscl . -read /Groups/_sensu | awk '($1 == "PrimaryGroupID:") { print $2 }'`
    dscl . -create /Users/_sensu UniqueID $sensu_gid
    dscl . -create /Users/_sensu PrimaryGroupID $sensu_gid
    dscl . -create /Users/_sensu UserShell /usr/bin/false
}

create_user_solaris()
{
    useradd -d $INSTALLER_DIR -g sensu sensu # user will be disabled by default
    passwd -N sensu # enable the user with nologin (NL)
}

create_user()
{
    missing=`user_missing`
    if [ $missing != "0" ]; then
        os=`detected_os`
        if [ $os = "aix" ]; then
            create_user_aix
        elif [ $os = "freebsd" ]; then
            create_user_freebsd
        elif [ $os = "linux" ]; then
            create_user_linux
        elif [ $os = "mac" ]; then
            create_user_mac
        elif [ $os = "solaris" ]; then
            create_user_solaris
        else
            echo "Unsupported OS for create_user function"
            exit 1
        fi
    fi
}

case "$1" in
    1) # initial install
    create_group
    create_user
    ;;
    2) # upgrade
    ;;
esac
postinstall scriptlet (using /bin/sh):

#!/bin/sh

detected_os()
{
    platform="unknown"
    unamestr=`uname`
    if [ "$unamestr" = "AIX" ]; then
        platform="aix"
    elif [ "$unamestr" = "Darwin" ]; then
        platform="mac"
    elif [ "$unamestr" = "FreeBSD" ]; then
        platform="freebsd"
    elif [ "$unamestr" = "Linux" ]; then
        platform="linux"
    elif [ "$unamestr" = "SunOS" ]; then
        platform="solaris"
    fi
    echo $platform
}

service_user()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        echo "_sensu"
    else
        echo "sensu"
    fi
    set -e
}

service_group()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        echo "_sensu"
    else
        echo "sensu"
    fi
    set -e
}

using_systemd()
{
    [ -e "/proc/1/comm" ] && grep -q "^systemd$" /proc/1/comm
}

os=`detected_os`
if [ $os = "unknown" ]; then
    echo "Unsupported OS"
    exit 1
fi

fix_agent_owner()
{
    chown $(service_user):$(service_group) /var/cache/sensu/sensu-agent
    chown $(service_user):$(service_group) /var/lib/sensu/sensu-agent
    chown $(service_user):$(service_group) /var/log/sensu
    chown $(service_user):$(service_group) /var/run/sensu
}

fix_backend_owner()
{
    chown $(service_user):$(service_group) /var/cache/sensu/sensu-backend
    chown $(service_user):$(service_group) /var/lib/sensu/sensu-backend
    chown $(service_user):$(service_group) /var/log/sensu
    chown $(service_user):$(service_group) /var/run/sensu
}

install_init_unit()
{
    local _service_name="$1"
    local _source_dir="$2"

    if using_systemd; then
        cp ${_source_dir}/${_service_name}.service /lib/systemd/system/
        chmod 0644 /lib/systemd/system/${_service_name}.service
    else
        cp ${_source_dir}/${_service_name} /etc/init.d/
        chmod 0755 /etc/init.d/${_service_name}
    fi
}

remove_init_unit()
{
    local _service_name="$1"

    if using_systemd; then
        rm /lib/systemd/system/${_service_name}.service
    else
        rm /etc/init.d/$_service_name
    fi
}

case "$1" in
    1) # initial install
    fix_agent_owner
    ;;
    2) # upgrade
    fix_agent_owner
    ;;

esac

# Done for both installs and upgrades.
install_init_unit sensu-agent /usr/share/sensu-go-agent-@SENSU_VERSION@
preuninstall scriptlet (using /bin/sh):
#!/bin/sh

detected_os()
{
    platform="unknown"
    unamestr=`uname`
    if [ "$unamestr" = "AIX" ]; then
        platform="aix"
    elif [ "$unamestr" = "Darwin" ]; then
        platform="mac"
    elif [ "$unamestr" = "FreeBSD" ]; then
        platform="freebsd"
    elif [ "$unamestr" = "Linux" ]; then
        platform="linux"
    elif [ "$unamestr" = "SunOS" ]; then
        platform="solaris"
    fi
    echo $platform
}

service_user()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        echo "_sensu"
    else
        echo "sensu"
    fi
    set -e
}

service_group()
{
    os=`detected_os`
    set +e
    if [ $os = "mac" ]; then
        echo "_sensu"
    else
        echo "sensu"
    fi
    set -e
}

using_systemd()
{
    [ -e "/proc/1/comm" ] && grep -q "^systemd$" /proc/1/comm
}

os=`detected_os`
if [ $os = "unknown" ]; then
    echo "Unsupported OS"
    exit 1
fi

fix_agent_owner()
{
    chown $(service_user):$(service_group) /var/cache/sensu/sensu-agent
    chown $(service_user):$(service_group) /var/lib/sensu/sensu-agent
    chown $(service_user):$(service_group) /var/log/sensu
    chown $(service_user):$(service_group) /var/run/sensu
}

fix_backend_owner()
{
    chown $(service_user):$(service_group) /var/cache/sensu/sensu-backend
    chown $(service_user):$(service_group) /var/lib/sensu/sensu-backend
    chown $(service_user):$(service_group) /var/log/sensu
    chown $(service_user):$(service_group) /var/run/sensu
}

install_init_unit()
{
    local _service_name="$1"
    local _source_dir="$2"

    if using_systemd; then
        cp ${_source_dir}/${_service_name}.service /lib/systemd/system/
        chmod 0644 /lib/systemd/system/${_service_name}.service
    else
        cp ${_source_dir}/${_service_name} /etc/init.d/
        chmod 0755 /etc/init.d/${_service_name}
    fi
}

remove_init_unit()
{
    local _service_name="$1"

    if using_systemd; then
        rm /lib/systemd/system/${_service_name}.service
    else
        rm /etc/init.d/$_service_name
    fi
}

case "$1" in
    0) # uninstall
    remove_init_unit sensu-agent
    ;;
    1) # upgrade
    ;;
esac
postuninstall scriptlet (using /bin/sh):
#!/bin/sh

case "$1" in
    0) # uninstall
    ;;
    1) # upgrade
    ;;
esac
