version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0
  awscli-windows: sensu/awscli-windows@1.0.0
  cmake: sensu/cmake@1.0.0
  docker: circleci/docker@1.4.0
  signtool: sensu/signtool@1.0.0
  windows: circleci/windows@2.4.0
  wixtoolset: sensu/wixtoolset@1.0.0

parameters:
  target_workflow:
    type: string
    default: ""
  publish:
    type: boolean
    default: false
  sensu_release_version:
    type: string
    default: fa03bf83bef1df882e5c75dc611a186cb0eae5e0

executors:
  packagecloud-pruner:
    docker:
      - image: sensu/sensu-release:<< pipeline.parameters.sensu_release_version >>-packagecloud-pruner
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

commands:
  create-target-directory:
    steps:
      - run:
          name: Create target directory
          command: mkdir -pv target
  setenv-from-file:
    parameters:
      variable-name:
        type: env_var_name
      path:
        type: string
    steps:
      - run:
          name: Set << parameters.variable-name >> environment variable
          command: >
            echo "export
            << parameters.variable-name >>=$(cat << parameters.path >> | tr -d
            '\n')" >> $BASH_ENV
      - run:
          name: Ensure << parameters.variable-name >> is set
          command: |
            if [ "x${<< parameters.variable-name >>}" = "x" ]; then
            echo "<< parameters.variable-name >> is empty"
            exit 1
            fi
      - run:
          name: Print << parameters.variable-name >>
          command: echo $<< parameters.variable-name >>
  setenv-target-workflow:
    parameters:
      branch:
        type: string
        default: "main"
    steps:
      - when:
          condition: << pipeline.parameters.target_workflow >>
          steps:
            - run:
                name: Set TARGET_WORKFLOW environment variable
                command: >
                  echo 'export
                  TARGET_WORKFLOW=<< pipeline.parameters.target_workflow >>'
                  >> $BASH_ENV
      - when:
          condition:
            not: << pipeline.parameters.target_workflow >>
          steps:
            - run:
                name: Find target workflow for << parameters.branch >> branch
                environment:
                  TARGET_BRANCH: << parameters.branch >>
                command: |
                  ./scripts/find-branch-workflow.sh > workflow
                  echo 'export TARGET_WORKFLOW="'$(cat workflow)'"' >> $BASH_ENV
      - run:
          name: Ensure TARGET_WORKFLOW is set
          command: |
            if [ "x$TARGET_WORKFLOW" = "x" ]; then
            echo "TARGET_WORKFLOW is empty"
            exit 1
            fi
      - run:
          name: Print TARGET_WORKFLOW
          command: echo $TARGET_WORKFLOW
  linux-amd64-only:
    parameters:
      target:
        type: string
      steps:
        type: steps
    steps:
      - when:
          condition:
            equal: [<< parameters.target >>, "linux_amd64"]
          steps: << parameters.steps >>
  backend-platforms-only:
    parameters:
      target:
        type: string
      steps:
        type: steps
    steps:
      - when:
          condition:
            or:
              - equal: [<< parameters.target >>, "linux_amd64"]
              - equal: [<< parameters.target >>, "linux_arm64"]
              - equal: [<< parameters.target >>, "linux_ppc64le"]
          steps: << parameters.steps >>
  fetch-job-artifacts:
    description: Fetches a job artifacts for a given workflow & job name
    parameters:
      workflow:
        type: string
        default: "$TARGET_WORKFLOW"
      job:
        type: string
      destination:
        type: string
        default: "target"
      filter:
        type: string
        default: ""
    steps:
      - run:
          name: >
            Fetch artifacts for << parameters.job >> with filter:
            << parameters.filter >>
          command: >
            ./scripts/circleci-fetch-artifacts.sh << parameters.workflow >>
            << parameters.job >> << parameters.destination >>
            << parameters.filter >>
  setup-metadata:
    description: Fetches metadata files and sets environment variables
    parameters:
      target:
        type: string
    steps:
      - fetch-job-artifacts:
          filter: "commit-date"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "version"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "build-number"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "git-revision"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "git-branch"
          job: build-<< parameters.target >>
      - setenv-from-file:
          variable-name: COMMIT_DATE
          path: target/commit-date
      - setenv-from-file:
          variable-name: SENSU_VERSION
          path: target/version
      - setenv-from-file:
          variable-name: BUILD_NUMBER
          path: target/build-number
      - setenv-from-file:
          variable-name: TARGET_REVISION
          path: target/git-revision
      - setenv-from-file:
          variable-name: TARGET_BRANCH
          path: target/git-branch
  install-msbuildtasks:
    description: Installs MSBuildTasks from Chocolatey
    steps:
      - run:
          name: Install MSBuild.CommunityTasks
          command: choco.exe install -y MSBuild.CommunityTasks
  extract-tarballs:
    description: Extracts all tarballs in a given directory
    parameters:
      working_directory:
        type: string
      find_command:
        type: string
        default: "find"
    steps:
      - run:
          name: Extract tarballs in << parameters.working_directory >>
          working_directory: << parameters.working_directory >>
          command: |
            << parameters.find_command >> -name '*.tar.gz' -type f -exec tar -zxf {} \;
  verify-binary:
    parameters:
      working_directory:
        type: string
      binary:
        type: string
    steps:
      - run:
          name: Verify file type of << parameters.working_directory >>/<< parameters.binary >>
          working_directory: << parameters.working_directory >>
          command: |
            if ! file << parameters.binary >> | grep executable; then
              file << parameters.binary >>
              cat << parameters.binary >>
            fi
  install-system-deps:
    steps:
      - run:
          name: Install file
          command: |
            sudo apt-get update && sudo apt-get install -y \
              file;
  verify-version:
    parameters:
      working_directory:
        type: string
      binary:
        type: string
    steps:
      - run:
          name: Print version of << parameters.working_directory >>/<< parameters.binary >>
          working_directory: << parameters.working_directory >>
          command: ./<< parameters.binary >> version
      - run:
          name: Verify version of << parameters.working_directory >>/<< parameters.binary >>
          working_directory: << parameters.working_directory >>
          command: >
            ./<< parameters.binary >> version | grep "${SENSU_VERSION}+"
  build-msi:
    parameters:
      working_directory:
        type: string
      arch:
        description: The architecture of the MSI package to build.
        type: string
        default: x64
    steps:
      - run:
          name: Create MSI packages for << parameters.arch >> platform
          working_directory: << parameters.working_directory >>
          command: msbuild.exe -property:Platform=<< parameters.arch >>
  packagecloudgo:
    steps:
      - run:
          name: Download packagecloud-go tool
          command: |
            baseURL="https://github.com/amdprophet/packagecloud-go/releases/download"
            version="0.1.2"
            file="packagecloud-go_${version}_linux_amd64.tar.gz"
            curl -Lo /tmp/packagecloud-go.tar.gz $baseURL/$version/$file
      - run:
          name: Install packagecloud-go tool
          command: |
            tar -C /tmp -zxf /tmp/packagecloud-go.tar.gz
            sudo mv /tmp/packagecloud /usr/local/bin
  install-log-collector-linux:
    steps:
      - run:
          name: Download circleci-logs tool
          command: |
            version="74baa1cd0c959bb05de3f587ea978ef82b6612d5"
            baseURL="https://s3-us-west-2.amazonaws.com/sensu.io"
            filename="circleci-logs-${version}.linux_amd64.tar.gz"
            curl -Lo /tmp/circleci-logs.tar.gz ${baseURL}/${filename}
      - run:
          name: Install circleci-logs tool
          command: sudo tar -C /usr/local/bin -zxf /tmp/circleci-logs.tar.gz
  install-log-collector-windows:
    steps:
      - run: mkdir -pv ~/bin
      - run: echo 'export PATH="$PATH:$HOME/bin"' >> $BASH_ENV
      - run: |
          version="74baa1cd0c959bb05de3f587ea978ef82b6612d5"
          baseURL="https://s3-us-west-2.amazonaws.com/sensu.io"
          filename="circleci-logs-${version}.windows_amd64.tar.gz"
          curl -Lo c:/tmp/circleci-logs.tar.gz ${baseURL}/${filename}
      - run: tar -C ~/bin -zxf c:/tmp/circleci-logs.tar.gz
  fetch-logs:
    description: "Collect logs for the current job"
    parameters:
      binary:
        type: string
        default: "circleci-logs"
      destination:
        type: string
        default: "/tmp/artifacts/s3/logs"
    steps:
      - run:
          name: "Wait 10 seconds before attempting to collect logs"
          command: sleep 10
      - run:
          name: "Create destination logs directory"
          command: mkdir -pv << parameters.destination >>
      - run: >
          << parameters.binary >> fetch -t $CIRCLE_TOKEN
          -o << parameters.destination >>/$CIRCLE_JOB.txt
  gather-artifacts:
    description: "Gather artifacts and copy them to the artifact directories"
    parameters:
      find_command:
        type: string
        default: "find"
      source:
        type: string
      destination:
        type: string
      filename:
        type: string
    steps:
      - run: mkdir -pv << parameters.destination >>
      - run: >
          << parameters.find_command >>
          << parameters.source >>
          -type f
          -name "<< parameters.filename >>"
          -exec cp {} << parameters.destination >> \;
  upload-artifacts-to-s3:
    description: "Upload artifacts to Amazon S3"
    parameters:
      find_command:
        type: string
        default: "find"
      source:
        type: string
        default: "/tmp/artifacts/s3"
    steps:
      - run:
          name: Upload artifacts to Amazon S3
          environment:
            FIND_CMD: << parameters.find_command >>
          command: >
            ./scripts/post-packages-s3.sh
            << parameters.source >>
            $TARGET_BRANCH
            $TARGET_REVISION
  download-and-install-wixtool-set:
    steps:
      - download-wixtool-set
      - install-wixtool-set
  download-wixtool-set:
    description: Download the WiX Toolset installer. Supports windows/amd64.
    parameters:
      installer_url:
        description: The URL of the WiX installer.
        type: string
        default: https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe
      destination:
        description: The path to save the installer to.
        type: string
        default: '$HOME\wix.exe'
      cache:
        description: Whether or not to cache the installer.
        type: boolean
        default: true
      cache-key:
        description: |
          String to use in cache key. Typically overridden when needed to bust
          cache.
        type: string
        default: "v1"
    steps:
      - when:
          condition:
            equal: [ << parameters.cache >>, true ]
          steps:
            - restore_cache:
                keys:
                  - wix-installer-<< parameters.cache-key >>-<< parameters.installer_url >>-{{ arch }}
      - run:
          name: Download WiX Toolset
          shell: powershell.exe
          command: curl.exe -sSLo wix.exe << parameters.installer_url >>
      - run:
          name: Download WiX Toolset
          shell: powershell.exe
          command: |
            If (Test-Path << parameters.destination >> -PathType Leaf) {
              echo "WiX installer has already been downloaded."
              exit 0
            }
            echo "Downloading the WiX Toolset installer."
            curl.exe -sSLo << parameters.destination >> << parameters.installer_url >>
  install-wixtool-set:
    description: Install the WiX Toolset. Supports windows/amd64.
    parameters:
      installer_path:
        description: The path to the WiX Toolset installer.
        type: string
        default: '$HOME\wix.exe'
      expected_path:
        description: The path to find the WiX installation in.
        type: string
        default: 'c:\Program Files (x86)\WiX Toolset v3.14'
    steps:
      - run:
          name: Add WiX to PATH (powershell.exe)
          shell: powershell.exe
          command: |
            [Environment]::SetEnvironmentVariable("Path", $env:PATH + `
            ";<< parameters.expected_path >>\bin", "Machine")
      - run:
          name: Add WiX to PATH (bash.exe)
          shell: bash.exe -eo pipefail
          command: |
            wix_path="$(cygpath '<< parameters.expected_path >>\bin')"
            echo "export PATH=\"$PATH:$wix_path\"" >> $BASH_ENV
      - run:
          name: Install WiX
          shell: powershell.exe
          command: |
            echo "Installing the WiX Toolset."
            .\wix.exe /install /quiet /norestart
      - run:
          name: Verify WiX installation
          shell: powershell.exe
          command: |
            echo $env:Path
            ls "<< parameters.expected_path >>\bin"
            candle.exe -h
jobs:
  build-linux-packages:
    docker:
      - image: cimg/python:3.8
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    parameters:
      target:
        type: string
      destination:
        type: string
    environment:
      TARGET_PLATFORM: << parameters.target >>
    steps:
      - checkout
      - create-target-directory
      - setenv-target-workflow
      - setup-metadata:
          target: << parameters.target >>
      - run: sudo apt update
      - run:
          name: Install RPM tools
          command: sudo apt install rpm
      - packagecloudgo
      - cmake/install
      - install-log-collector-linux
      - aws-cli/install
      - install-system-deps
      - fetch-job-artifacts:
          filter: ".tar.gz"
          job: build-<< parameters.target >>
          destination: << parameters.destination >>
      - extract-tarballs:
          working_directory: << parameters.destination >>
      - backend-platforms-only:
          target: << parameters.target >>
          steps:
            - verify-binary:
                working_directory: << parameters.destination >>
                binary: sensu-backend
      - verify-binary:
          working_directory: << parameters.destination >>
          binary: sensu-agent
      - verify-binary:
          working_directory: << parameters.destination >>
          binary: sensuctl
      - linux-amd64-only:
          target: << parameters.target >>
          steps:
            - verify-version:
                working_directory: << parameters.destination >>
                binary: sensu-agent
            - verify-version:
                working_directory: << parameters.destination >>
                binary: sensu-backend
            - verify-version:
                working_directory: << parameters.destination >>
                binary: sensuctl
      - run:
          name: Run CMake
          working_directory: ../obj
          command: env && cmake $CIRCLE_WORKING_DIRECTORY
      - run:
          name: Build templates
          working_directory: ../obj
          command: make VERBOSE=1
      - run:
          name: Build packages
          working_directory: ../obj
          command: make sensu-packages VERBOSE=1
      - run:
          name: Test packages
          working_directory: ../obj
          command: make test-sensu-packages VERBOSE=1
      - gather-artifacts:
          filename: "*.deb"
          source: "../obj"
          destination: "/tmp/artifacts/s3/build/deb"
      - gather-artifacts:
          filename: "*.rpm"
          source: "../obj"
          destination: "/tmp/artifacts/s3/build/rpm"
      - gather-artifacts:
          filename: "*.deb"
          source: "../obj"
          destination: "/tmp/artifacts/circleci"
      - gather-artifacts:
          filename: "*.rpm"
          source: "../obj"
          destination: "/tmp/artifacts/circleci"
      - store_artifacts:
          path: "/tmp/artifacts/circleci"
          destination: "."
      - when:
          condition: << pipeline.parameters.publish >>
          steps:
            - run:
                name: Publish pack
                working_directory: ../obj
                command: make publish-sensu-packages VERBOSE=1
            - fetch-logs
            - upload-artifacts-to-s3
  build-windows-packages:
    executor:
      name: windows/default
      shell: bash.exe -eo pipefail
    parameters:
      package_name:
        type: string
      binary:
        type: string
    steps:
      - checkout
      - awscli-windows/download-and-install
      - install-msbuildtasks
      - create-target-directory
      - setenv-target-workflow
      - setup-metadata:
          target: windows_amd64
      - install-log-collector-windows
      - fetch-job-artifacts:
          filter: ".tar.gz"
          job: build-windows_386
          destination: target/windows_386
      - fetch-job-artifacts:
          filter: ".tar.gz"
          job: build-windows_amd64
          destination: target/windows_amd64
      - extract-tarballs:
          working_directory: target/windows_386
          find_command: /bin/find
      - extract-tarballs:
          working_directory: target/windows_amd64
          find_command: /bin/find
      - verify-binary:
          working_directory: target/windows_386
          binary: << parameters.binary >>
      - verify-binary:
          working_directory: target/windows_amd64
          binary: << parameters.binary >>
      #- download-and-install-wixtool-set
      - wixtoolset/download-and-install:
          installer_url: https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe
      - run: curl -LsO https://github.com/appveyor/secure-file/releases/download/1.0.1/secure-file.zip
      - run: unzip secure-file.zip
      - run:
          name: Decrypt codesigning certificate
          shell: powershell.exe
          command: >
            .\secure-file.exe -decrypt codesign-cert.p12.enc
            -secret $env:DECRYPTION_SECRET_2023 -salt $env:DECRYPTION_SALT_2023
      - signtool/import-certificate:
          certificate: codesign-cert.p12
      - signtool/sign:
          path: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe'
          working_directory: target/windows_386
          file: << parameters.binary >>
      - signtool/sign:
          path: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe'
          working_directory: target/windows_amd64
          file: << parameters.binary >>
      - build-msi:
          working_directory: wix/<< parameters.package_name >>
          arch: x86
      - build-msi:
          working_directory: wix/<< parameters.package_name >>
          arch: x64
      - signtool/sign:
          path: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe'
          working_directory: dist/msi/en-US
          file: '*.msi'
      - run:
          name: Copy << parameters.package_name >> MSIs to choco tools
          command: |
            cp dist/msi/en-US/*.msi choco/<< parameters.package_name >>/tools
      - run:
          name: Create choco package for << parameters.package_name >>
          working_directory: choco/<< parameters.package_name >>
          command: msbuild.exe
      - gather-artifacts:
          find_command: "/bin/find"
          filename: "*.msi"
          source: "choco/<< parameters.package_name >>/tools"
          destination: "c:/tmp/artifacts/s3/build/msi"
      - gather-artifacts:
          find_command: "/bin/find"
          filename: "*.nupkg"
          source: "choco/<< parameters.package_name >>"
          destination: "c:/tmp/artifacts/s3/build/nupkg"
      - gather-artifacts:
          find_command: "/bin/find"
          filename: "*.msi"
          source: "choco/<< parameters.package_name >>/tools"
          destination: "c:/tmp/artifacts/circleci"
      - gather-artifacts:
          find_command: "/bin/find"
          filename: "*.nupkg"
          source: "choco/<< parameters.package_name >>"
          destination: "c:/tmp/artifacts/circleci"
      - store_artifacts:
          path: "c:/tmp/artifacts/circleci"
          destination: "."
      - when:
          condition: << pipeline.parameters.publish >>
          steps:
            - run:
                name: Push nupkg to AppVeyor NuGet feed
                working_directory: choco/<< parameters.package_name >>
                command: >
                  nuget push *.nupkg -ApiKey $APPVEYOR_NUGET_API_KEY -Source
                  https://ci.appveyor.com/nuget/sensu-hjg205j7fvg1/api/v2/package
            - fetch-logs:
                binary: "circleci-logs.exe"
                destination: "c:/tmp/artifacts/s3/logs"
            - upload-artifacts-to-s3:
                find_command: "/bin/find"
                source: "c:/tmp/artifacts/s3"
  packagecloud-pruner:
    executor: packagecloud-pruner
    steps:
      - run: /tools/packagecloudpruner

workflows:
  packaging:
    jobs:
      - build-linux-packages:
          name: << matrix.target >>
          destination: target/<< matrix.target >>
          matrix:
            parameters:
              target:
                #- linux_386
                #- linux_amd64
                #- linux_arm64
                #- linux_arm_5
                #- linux_arm_6
                #- linux_arm_7
                #- linux_mips_hardfloat
                #- linux_mipsle_hardfloat
                #- linux_mips64le_hardfloat
                #- linux_ppc64le
                #- linux_s390x
      - build-windows-packages:
          name: windows_agent
          package_name: sensu-go-agent
          binary: sensu-agent.exe
      - build-windows-packages:
          name: windows_cli
          package_name: sensu-go-cli
          binary: sensuctl.exe
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - packagecloud-pruner
